[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Crash Course in R",
    "section": "",
    "text": "What, Why and How?",
    "crumbs": [
      "What, Why and How?"
    ]
  },
  {
    "objectID": "index.html#what",
    "href": "index.html#what",
    "title": "A Crash Course in R",
    "section": "What?",
    "text": "What?\nThis website is a crash course in the R programming language. The Course is intended for students or researchers with little or no programming, statistics, or data science background who need to learn to use R as a research tool. The course can be used for a linear learning experience, from the first to the last chapter, or as a reference for specific problems.",
    "crumbs": [
      "What, Why and How?"
    ]
  },
  {
    "objectID": "index.html#why",
    "href": "index.html#why",
    "title": "A Crash Course in R",
    "section": "Why?",
    "text": "Why?\nWhy would you want to learn R and does it matter for going trough this course? Yes, it matters. R with auxillary software is a super flexible and powerful enrvironment and ecosystem for statistics and data science. It makes it possible to develop cutom analyses for your specif research question. The R ecosystem is also leading in providing tools for reproducible analyses. Creating a reproducible analysis means that you can show other what you have done. This course introduces R in the context of being a tool for reproducible scientific work.",
    "crumbs": [
      "What, Why and How?"
    ]
  },
  {
    "objectID": "index.html#how",
    "href": "index.html#how",
    "title": "A Crash Course in R",
    "section": "How?",
    "text": "How?\nThe course is structured around the basics of getting to use R in everyday scientific work (e.g., writing a master’s thesis or a research paper).",
    "crumbs": [
      "What, Why and How?"
    ]
  },
  {
    "objectID": "01-software.html",
    "href": "01-software.html",
    "title": "1  Setting up your software environment",
    "section": "",
    "text": "1.1 R\nThere are multiple computer languages and software solutions that could satisfy our needs. However, we will focus on a combination of continuously improved tools that makes it easy for the user to perform data analyses, collaborate on doing them, communicate the process and results, and to do all this in a reproducible manner. This first chapter is basically a check-list of what you must install on your system to take full advantage of the proposed tools.\nR is a free, open-source software designed for statistical computing. We will use R as a part of an environment (using RStudio, introduced below). To download and install R:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your software environment</span>"
    ]
  },
  {
    "objectID": "01-software.html#r",
    "href": "01-software.html#r",
    "title": "1  Setting up your software environment",
    "section": "",
    "text": "Go to The Comprehensive R Archive Network,1\nSelect your operating system (Download R for Windows, MacOS or Linux).\n\nIf you have Windows, choose base, click on “Download R (…) for windows”, save and run the file. The installation process should be self explanatory.\nIf you have MacOS, download and install the latest release.\n\nRun the installer to install R.\n\n1 What is CRAN? See here for the FAQ answer. Basically, this is the website that keep the latest version of R and many of the extensions (R packages) that you will use when working with R. A major advantage of using R over other similar solutions is the well maintained package system, making it easy to install and understand user-contributed packages.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your software environment</span>"
    ]
  },
  {
    "objectID": "01-software.html#rtools",
    "href": "01-software.html#rtools",
    "title": "1  Setting up your software environment",
    "section": "1.2 Rtools",
    "text": "1.2 Rtools\nRtools is used when you build your own R packages (more on that later), and when using some advanced software packages that talk to R, like Stan. If you only imagine basic use of R and related software, Rtools is not strictly needed, and you could install it later.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your software environment</span>"
    ]
  },
  {
    "objectID": "01-software.html#rstudio",
    "href": "01-software.html#rstudio",
    "title": "1  Setting up your software environment",
    "section": "1.3 RStudio",
    "text": "1.3 RStudio\nRStudio is a software designed to make it easier to use R. It is free to download and use. It is designed as an integrated development environment that lets you organize your work together with R and other tools. Install it by going to https://www.posit.co/.\n\nSelect “Open Source” and RStudio IDE\nScroll down and find the Open Source Edition\nDownload the installer made for your operating system.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your software environment</span>"
    ]
  },
  {
    "objectID": "01-software.html#the-anatomy-of-rstudio",
    "href": "01-software.html#the-anatomy-of-rstudio",
    "title": "1  Setting up your software environment",
    "section": "1.4 The Anatomy of RStudio",
    "text": "1.4 The Anatomy of RStudio\nThe appearance of RStudio can be changed for a more pleasant user experience. I like a dark theme as it is easier on the eye. We can also move the different components of RStudio. I like to have the console on the top right and the source on the top left. I think this makes it easier to see output when coding interactively. All this will be clearer as thing evolve, but for now, start R Studio, go to Tools &gt; Global options and make it personal (see Figure 1.1)!\n\n\n\n\n\n\nFigure 1.1: Customize the appearance of RStudio\n\n\n\nAs you may have spotted in the image above, it is possible to change the font of your editor. I like Fira code.\n\n\n\n\n\n\nDefining concepts\n\n\n\nSource editor: Is where scripts are edited.\nEnvironment: In R, the environment is where data variables and structures are saved during execution of code.\nScript: Your script is the document containing your computer code. This is your computer program (using a loose definition of a software program).\nVariables: In R, variables are containers for data values.\nWorkspace: This is your environments as represented on your computer. A workspace can be, but should not be saved between sessions.\n\n\n\n1.4.1 The source editor\nThe source editor is where you edit your code. When writing your code in a text-file, you can call it a script, this is essentially a computer program where you tell R what to do. It is executed from top to bottom. You can send one line of code, multiple lines or whole sections into R. In the image below (Figure 1.2), the source window is in the top left corner.\n\n\n1.4.2 Environment\nThe environment is where all your objects are located. Objects can be variables or data sets that you are working with. In RStudio the environment is listed under the environment tab (bottom left in the image).\nCopy the code below to a R script. To run it line by line, set your cursor on the first line a press Ctrl+Enter. What happened in your environment? Press Ctrl+Enter again and you will see a plot in the plot window. Amazing stuff!\n\na &lt;- c(1, 2, 3, 4)\n\nplot(a)\n\n\n\n1.4.3 The console\nBy pressing Ctrl+Enter from the script, as described above, you sent your code to the console. You can also interact with R directly here. By writing a in the console and hitting enter you will get the value from the object called a. This means that it is also where output from R is usually printed. In the image below, the console is in the top right corner.\n\n\n1.4.4 Files, plots, packages and help files\nIn RStudio files are accessible from the Files tab. The files tab shows the files in you root folder. The root folder is where R will search for files if you tell it to. We will talk more about the root folder later in connection with projects. Plots are displayed in the Plot tab. Packages are listed in the packages tab. If you access the help files, these will be displayed in the help tab. In the image below all these tabs are in the bottom right corner. More on help files and packages later.\n\n\n\n\n\n\nFigure 1.2: Interacting with RStudio",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your software environment</span>"
    ]
  },
  {
    "objectID": "01-software.html#reproducible-data-science-using-rstudio",
    "href": "01-software.html#reproducible-data-science-using-rstudio",
    "title": "1  Setting up your software environment",
    "section": "1.5 Reproducible data science using RStudio",
    "text": "1.5 Reproducible data science using RStudio\nWhen starting to work more systematically in RStudio we will set some rules that will allow for reproducible programming. Remember from Chapter 2 that part of a fully reproducible study is software/code that produces the results. It turns out that when working interactively with R you can fool yourself to believe that you have included all steps needed to produce some results in your script. However, variables may be stored in your environment but not by assigning values to them in your script. This will become a problem if you want to share your code, a certain value/variable needed to make the program work may be missing from your script.\nTo avoid making such a mistake it is good practice not to save variables in your environment between sessions, everything should be scripted and documented and assumed not defined elsewhere. In RStudio we can make an explicit setting Not to save the workspace (See ?fig-saveworkspace).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your software environment</span>"
    ]
  },
  {
    "objectID": "01-software.html#git-and-github",
    "href": "01-software.html#git-and-github",
    "title": "1  Setting up your software environment",
    "section": "1.6 Git and Github",
    "text": "1.6 Git and Github\nGit is a software that you need to install on your system in order to enable version control. There are alternatives but git is likely the most used freely available softwrae. Github is a web platform that allows collaboration and web-based storage of your work. First, we will install git.\nFor windows:\n\nIf you have Windows, Go to https://git-scm.com/downloads and download the latest version for your operating system.\nRun the installer. Make a note of where you installed it!\n\nFor Mac:\n\nIf you are on Mac, the easiest thing is to first install Homebrew, this will make it easy to get the latest version of what we will need. Go to https://brew.sh/ and follow the instructions. Note that you will need to open the terminal and enter the install command.\nInstall git by entering the follwing command in a freshly opened terminal:\n\nbrew install git\nCheck if git was installed by restarting the terminal and write\ngit --version\nAdditional warnings might appear indicating that you’ll need some extra software. More specifically, you might need Xcode command line tools. To install these, go to your terminal and enter\nxcode-select --install\nIf you had problems with the homebrew installation itself or the brew installation of git before, try again after installing xcode command line tools.\n\n1.6.1 Create a GitHub account\nThe first thing to do is to establish a GitHub account.\n\nGo to github.com and click “Sign up”.\nSelect a suitable user name and a plan, there is a free alternative.\n\n\n\n1.6.2 Download and install GitHub CLI\nThe easiste way to set up your GitHub client is to use GitHub CLI. GitHub CLI is a collection of commands that will be available on the command line after installing the software. These commands include setting up the connection between your computer and Github.com. But they also contains commands for day-to-day version control.\n\nGo to cli.github.com/ and select the download alternative for your setup. There are several alternatives for installing GitHub CLI, see here.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your software environment</span>"
    ]
  },
  {
    "objectID": "01-software.html#setting-up-git-and-github",
    "href": "01-software.html#setting-up-git-and-github",
    "title": "1  Setting up your software environment",
    "section": "1.7 Setting up Git and GitHub",
    "text": "1.7 Setting up Git and GitHub\nFirst we will let RStudio know where git is located\n\nOpen RStudio, go to Global Options under the Tools menu. Go to the Git/SVN sub-menu and find the folder where git.exe is located by browsing in the “Git executable” field.\n\nOn windows:\nIf you have installed git using default settings your git.exe should be located in C:/Program Files/Git/bin/git.exe.\nOn Mac:\nIf you have installed git using homebrew, your git version may be found in /usr/local/bin/git.\nNext we need to connect our git software to github. This is done by authentication. There are several options, however below are one option that should work right away! We will take advantage of the neewly installed GitHub CLI.\nTo perform the authentication process:\n\nOpen a terminal and type gh auth login, follow the instructions.\n\nDone!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your software environment</span>"
    ]
  },
  {
    "objectID": "01-software.html#quarto-and-friends",
    "href": "01-software.html#quarto-and-friends",
    "title": "1  Setting up your software environment",
    "section": "1.8 Quarto and friends",
    "text": "1.8 Quarto and friends\nThe R community has pioneered literate programming for data analysis by early adoption of file formats that lets the user combine computer code and output with text (Peng, Dominici, and Zeger 2006). A well adopted file format in recent years have been R markdown which combines R code with text and lets the user compile reports in multiple output formats from a source document. R markdown is an “R-centric” approach to literate programming. Even though it lets you combine multiple computer languages, all code execution goes through R. Recently, a new format was introduced, Quarto, which is not executed through R but its own dedicated software, Quarto.\n\nPeng, R. D., F. Dominici, and S. L. Zeger. 2006. “Reproducible Epidemiologic Research.” Journal Article. Am J Epidemiol 163 (9): 783–89. https://doi.org/10.1093/aje/kwj093.\nRmarkdown and Quarto have many similarities in that you can use markdown, a well established markup language to format text with a plain text editor (like notepad). This means that for the R user, most differences between RMarkdown and quarto in formatting your documents are irrelevant for getting started.\nAs quarto authoring requires its own software, we need to do some installation.\n\nGo to quarto.org\nClick “Get Started” and follow the instructions for downloading Quarto CLI.\n\nA nice output from a quarto source documents is a PDF. In order to create PDFs using R/RStudio/quarto we need to install a version of the typesetting system TeX. Quarto recommends2 using tinytex which is easily installed after you have installed quarto.\n2 See the quarto documentation for details on creating pdfs and installing TeX distributions https://quarto.org/docs/output-formats/pdf-basics.html\nOpen up RStudio and a fresh terminal\ntype quarto install tinytex and follow the instructions.\n\nYou should be ready to go now!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your software environment</span>"
    ]
  },
  {
    "objectID": "01-software.html#summary",
    "href": "01-software.html#summary",
    "title": "1  Setting up your software environment",
    "section": "1.9 Summary",
    "text": "1.9 Summary\nIn this first “lesson” we have installed R, RStudio, git, GitHub CLI, quarto and tinytex. You have also created a github account. These are the tools that you will need to go further in this course. But what if you run into problems? Do not worry, the internet is at your service! A lot of people work very hard to make it easy for beginners to adopt their tools. Documentation of the tools we have installed so far is available through google or any other search engine. People are also very helpful in answering questions, answers to large and small problems can be found in forums such as stack overflow.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Setting up your software environment</span>"
    ]
  },
  {
    "objectID": "02-basic-base-r.html",
    "href": "02-basic-base-r.html",
    "title": "2  R basics",
    "section": "",
    "text": "2.1 What is R?\nR is a computer software, but it is also a programming language1. The programming language allows us to write computer programs in a language that is especially well suited for data analysis. The software allows for efficient interpretation of the language and the production of, among other things, high quality graphics. In it’s most basic form, R can be thought of as a oversized calculator. In this lesson we will establish this and go further by understanding the basic R syntax.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "02-basic-base-r.html#what-is-r",
    "href": "02-basic-base-r.html#what-is-r",
    "title": "2  R basics",
    "section": "",
    "text": "1 See here for a more technical definition.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "02-basic-base-r.html#objects-and-assignment",
    "href": "02-basic-base-r.html#objects-and-assignment",
    "title": "2  R basics",
    "section": "2.2 Objects and assignment",
    "text": "2.2 Objects and assignment\nEverything in R are objects (Chambers 2009). What does this mean? Let’s say that we want to store some information in R, this information is a value, let’s say the number 12. To store this information we will assign the value to an object and call this object twelve. An object is a container of data “of all kinds” (Chambers 2009, 111) that we create in our working memory to hold our data (the value). We assign the value to our object by using an assignment operator. The most common assignment operator is &lt;-. Think of the assignment operator as an arrow pointing from the value towards the object, like this:\n\nChambers, John M. 2009. Software for Data Analysis: Programming with R. Nachdr. Statistics and Computing. New York, NY: Springer.\n\ntwevle &lt;- 12\n\nWe can also reverse the direction of the assignment operator and make the object and value change places.\n\n12 -&gt; twelve\n\nTo call an object, or tell R that we want to look at our object, we would simply type the object name in our R console. We may try this in the R script box below. I have already entered some information in the script, these are comments starting with the hash symbol (#). The comments tells us what to do. You can enter R code on the line below the comments, R will ignore everything following a comment sign and start to interpret code again on the subsequent line. When you have entered your code, press “Run Code” to inspect the results.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIt is also possible to use the equal sign (=) to assign data to objects. The equal sign used as an assignment operator, as in twelve = 12, is equivalent to twelve &lt;- 12.\n\n2.2.1 R as a giant calculator\nR can make use of all basic arithmetic operators like plus (+), minus (-), divided by (*) and multiplied by (/). These operators can be used on objects, and directly on values. In the script box below, try to calculate (and store) the following:\n\\[y = 5 * 2 + 1 * 0.5\\] Then use the object and add 10, store the new result in a new object called z.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nA possible solution to the above challenge would be\n\ny &lt;- 5 * 2 + 1 * 0.5\n\nz &lt;- y + 10\n\nThe result of your computations should be 20.5. In the above example we have discovered that mathematical expression can be written using values and objects already stored in the environment.\nWe can also use functions to perform mathematical operations on objects. Examples of such functions are log(), exp(), abs() and sqrt(). A function is a special object that itself can be use other objects (or variables/values) as input. A function often takes arguments, these arguments are supplied to the function inside its brackets.\nThe log() function returns the natural logarithm of a numeric object. Mathematically, the log function returns the exponent (\\(x\\)) with the base \\(e\\) that give us our input number \\(y\\) (\\(e^x = y\\)). To get the natural logarithm of 100 we would use R and write log(100) which results in 4.6051702. This corresponds to \\(100 = 2.718282 ^ {4.60517}\\). The base \\(e\\) must be raised to the power of 4.60517 to yield 100.\nWhat is the natural logarithm of 50? Try to calculate it in the script box below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can of course make similar computations on stored objects.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAbove we have learned that numbers and objects that store numbers can be used in computations using basic arithmetic operators and functions that perform mathematical operations.\n\n\n2.2.2 Different types of data\nAbove we have worked on numeric data. These are values represented either as integers (whole numbers; e.g. 1, 2, 3) or what is sometimes called “double” or “numerical”, i.e. decimal numbers (e.g. 1.2 or 2.781).\nIn the code example below we will store an integer and a double and inspect its “class”, the class decides what R can do with an object.\n\nnum &lt;- as.numeric(2.456)\n\nint &lt;- as.integer(2)\n\nclass(num)\nclass(int)\n\nUse the script box below to test out the code example. What is the purpose of the class function?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThere are other types of data that we can use in R, these are character, logical and complex (we will not discuss complex numbers further here).\nA character or string value can be though of as text, e.g. \"this is a character\" could be the data contained in a character object. A logical value is either TRUE or FALSE. This type of data is also known as Boolean\nAs mentioned above, the type of data restricts what operations that can be performed using the data. For example, we cannot do mathematical operations on characters or logicals. Try out the code below and inspect the results. What does the error message tells you?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can define data types by using functions such as as.numeric() or as.character() these will tell R to try to convert data to a specific type. If this is not possible you will get an error message. Try the code below and inspect the error message.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe result of the conversion of a character to a numeric is NA, that can be read as Not Available. NA is an example of a protected symbol in R. We cannot use this as a name of an object. It is used to indicate missingness, or missing values.\nIn the above section we have identified different types of data that are used in R, next we will try to combine single values into more complex data representations.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "02-basic-base-r.html#combining-data",
    "href": "02-basic-base-r.html#combining-data",
    "title": "2  R basics",
    "section": "2.3 Combining data",
    "text": "2.3 Combining data\nSo far we have work on single valued objects. This is not very efficient. Conveniently, R has an efficient way of working with data using vectors. A vector is a structure for combining data of the same type. For example, we can construct a numeric vector of heights using the combine function c(). Let’s say height &lt;- c(1.74, 1.81, 1.51, 1.92). An additional vector of weights can also be constructed as weight &lt;- c(85.1, 81.1, 48.9, 88.4). We can use these vector to do calculations, these calculations will be “vectorized”.\nThe body mass index is calculated as\n\\[BMI = \\frac{\\text{Weight (kg)}}{\\text{Height (m)}^2}\\]\nUsing vectorized operations we can calculate BMI for each row of the two vectors defined above simply using BMI &lt;- weight/height^2. Modify the code below to inspect each vector and the resulting BMI vector.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nVectors can be combined into data frames. These are convenient tabular, two-dimensional representations of multiple, equal length vectors. To combine the vectors defined above into a data frame we could directly put them in a data frame. In the example below we use df to name the data frame. To add a new variable (or vector) to the data frame we can use the $ operator which creates a new variable (or overwrites it!). Notice also that we access weight and height in the existing data.frame using the $ operator.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nAlternatively we may access specific rows and columns of data frames using brackets. The syntax is df[row,column]. To access all row of a specific column, for example “weight” we would write df[,1]since weight is the first column of the data frame called “df”.\nTry to calculate BMI using the row index method explained above.\nA data frame can combine different data types in the same data structure. The data are, as indicate above related by row as one row contains e.g. weight and height from one individual. We might add information on the individuals by adding variables of different types. Modify and run the code below to inspect the data frame.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can further combine data into a list. A list can contain different data structures or values/objects. A list can even contain other lists. To combine objects into a list we simply put them into the list() function. To access objects in lists we can use double brackets. Using the code below we could access the second item in the list using my_list[[2]]. Objects in lists can also be named, in such cases we can use the $ operator to access them. Modify the code below to explore this concept.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "02-basic-base-r.html#logical-operations-and-conditions",
    "href": "02-basic-base-r.html#logical-operations-and-conditions",
    "title": "2  R basics",
    "section": "2.4 Logical operations and conditions",
    "text": "2.4 Logical operations and conditions\nIn the future you will select observations based on some specific conditions. This could for example mean that you would want to keep all observations where the variable X is greater than 5. To communicate this to R we would create a vector of TRUE and FALSE. R will keep all observations that satisfy our condition and therefore are TRUE.\nIn the script box below, we first construct a vector of numbers followed by a logical test. The test will result in TRUE when the condition is satisfied. Notice that the “test” gives you a vector of TRUE/FALSE.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn the example above we used the ‘greater than’ operator (&gt;). There are a few more usefull operators:\n\n\n\nOperator\nMeaning\n\n\n\n\n==\nequal to\n\n\n!=\nnot equal to\n\n\n&lt;\nless than\n\n\n&gt;\ngreater than\n\n\n&lt;=\nless than or equal to\n\n\n&gt;=\ngreater than or equal to\n\n\n\nTry to modify the script box above to test out the different operators.\nUsing the “AND” operator (&) we can add conditions that needs to be fulfilled to produce TRUE. This might be useful when two or more conditions needs to be satisfied. In addition to our values stored in my_values in the script box above, we might want to see the condition colors == \"green\" satisfied as well, where colors is a vector of colours. Run the codse below and inspect the results\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can store the results in a vector or use it to select values in a vector. Using brackets on a vector (or data frame) we can select observations based on a logical vector (produced by logical tests).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nUsing the “NOT” operator (!) we can perform negation on any of the logical operators. Let’s say we want have all observations that do not satisfy our filter above. Run the code below and inspect the results. Notice the parentheses which indicates that we put the negation on the whole expression.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe “OR” operator (|) gives us the possibility to select values that satisfies one or both of tqo conditions.\n\nmy_values &gt; 5 | colors == \"green\"\n\nTry to put the above in square brackets and filter one of the vectors to see that you get what you anticipate.\nFinally, we could test if a logical vector contains TRUE or if all values are TRUE. To do this we would use the functions any() and all().\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "02-basic-base-r.html#functions",
    "href": "02-basic-base-r.html#functions",
    "title": "2  R basics",
    "section": "2.5 Functions",
    "text": "2.5 Functions\nWe mentioned above that everything in R is an object. This is true even when we talk about functions. Functions are special kind of objects, they contain code that upon execution perform certain tasks. A function may need to have certain arguments specified. Arguments are user input into the function to specify how the functions should behave. A common usage of a function is to do something with data that you, the user, supply to the function.\nLet’s specify a function to see what it does. We have a vector of numbers, let’s say my_values. We want to construct a function that calculates the mean of that vector. The function may later be used to calculate averages of other vectors so we should try to make it as general as possible. Let’s start with the design of the actual calculation2.\n2 Don’t be afraid of mathematics! Take it slow and translate it to your language. Some books on statistics are a lot easier to read if you are prepared to read simple mathematical expressions. Sometimes it is also good to be able to write an expression. Mathematics, like computer code, is also a language. To learn a new language we need to try not to be afraid!The mean (\\(\\bar{x}\\)) of a vector (\\(x_i\\)) is calculated as\n\\[\\begin{align}\n\\bar{x}&=\\frac {1}{n} \\sum_{i=1}^{n}x_{i} \\\\\n&= \\frac {x_{1}+x_{2}+\\cdots +x_{n}}{n}\n\\end{align}\\]\nWhich we can read as “one over the number of observations times the sum of all observations”. Or, as in the second row, “the sum of all observations divided by the number of observations”.\nWe can translate this to code. A simple way to do this is to use other functions, in this case length() that returns the number of observations (or length) in a vector, and sum() that gives us the sum of all observations in a numeric vector. In the code block below I have simply combined data with the expression needed to calculate the average.\n\nsome_values &lt;- c(3, 4, 5, 6, 7, 8)\n\n1/length(some_values) * sum(some_values)\n\nThe next step is to put the code into a function. A function is defined using a special function, called function! Confusing? Yes. Let’s see how it is done.\n\nmy_mean_function &lt;- function(DATA) {\n  1/length(DATA) * sum(DATA)\n}\n\nUsing function we define the function called my_mean_function. Using the assignment operator it is stored in our environment (R’s working memory). The function “body” contains the code. It says that it will use an object called DATA that should be given as an argument in the function call, notice that we have defined the function with an argument called DATA.\nSince we are not storing the output from the calculation 1/length(DATA) * sum(DATA) in any new object inside the function running the function in our R session will return the mean of what ever we define as DATA.\nIn the script block below we have everything defined. Try out the function by modifying the code so that it prints my_mean.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOf course, there is already a function that will give you the mean of a numeric vector and it is called mean(). In the simple case, the mean() function takes one argument x that should be a numeric vector. It could look like this:\nmean(my_values) # Calculate the mean of your vector.\nDefining functions for yourself can be a very efficient way of performing data analysis, but most functions that you need are already specified in R. Other people have already gone trough the trouble of defining functions that are easy to use for specific tasks. In the next lesson we will explore the package handling system in R.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "02-basic-base-r.html#file-formats-for-editing-and-executiong-r-code",
    "href": "02-basic-base-r.html#file-formats-for-editing-and-executiong-r-code",
    "title": "2  R basics",
    "section": "2.6 File formats for editing and executiong R code",
    "text": "2.6 File formats for editing and executiong R code\nA confusing part of using R is that we are really just able to communicate with R through the console. There are however a lot of methods to do this, and save your input, and output for later. This is central to how we will work with R: We create some input (code), R returns results, like numbers, text or figures and these can be formatted to be saved in different formats.\n\n2.6.1 R scripts\nThe most basic file format for R code is an R script, as we have already touched upon. An R script contains code and comments. Code is executed by R and comments are ignored. Ideally, R scripts are commented to improve readability of what the do. Commenting code is also a good way of creating a roadmap of what you want to do. In the image below (Figure 2.1), R code is written based on a plan written with comments. Note that when a line starts with at least one # it is interpreted by R as a comment.\n\n\n\n\n\n\nFigure 2.1: Commenting and coding in an R script\n\n\n\nLater we will introduce another format, a format that enables combining R code with prose, tables, figures and more.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R basics</span>"
    ]
  },
  {
    "objectID": "03-r-packages.html",
    "href": "03-r-packages.html",
    "title": "3  Packages are where functions live",
    "section": "",
    "text": "3.1 Where do packages live?\nThe R ecosystem consists of packages. These are collections of functions organized in a systematic manner. Functions are created to perform a specialized task, and packages often have many function used to do e.g. analyses of a specific kind of data, or more general task such as making figures or handle data.\nLater in this course we will use many different packages, for example dplyr, tidyr and ggplot2. dplyr and tidyr are packages used to transform and clean data. ggplot2 is used for making figures.\nTo install a package, you use the install.packages() function. You only need to do this once on your computer (unless you re-install R). You can write the following code in your console to install dplyr.\ninstall.packages(\"dplyr\")\nAlternatively, in RStudio, click “Packages” and “Install” and search for the package you want to install. To use a package, you have to load it into your environment. Use the library() function to load a package.\nlibrary(\"dplyr\")\nThe package dplyr has now loaded into your environment, this means that all the functions that are part of the dplyr package are available for R.\nBut where do packages comes from? When using install.packages, R will look for a package with the your name in a repository that is defined in your options.1 A repository is in this case a database from which it is possible to download and install R packages. The repository is likely a mirror of a CRAN repository.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Packages are where functions live</span>"
    ]
  },
  {
    "objectID": "03-r-packages.html#where-do-packages-live",
    "href": "03-r-packages.html#where-do-packages-live",
    "title": "3  Packages are where functions live",
    "section": "",
    "text": "1 The behavior of R is in many cases dictated by options, one such option is the preferred repository for downloading packages, see here for details",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Packages are where functions live</span>"
    ]
  },
  {
    "objectID": "03-r-packages.html#alternatives-to-cran",
    "href": "03-r-packages.html#alternatives-to-cran",
    "title": "3  Packages are where functions live",
    "section": "3.2 Alternatives to CRAN",
    "text": "3.2 Alternatives to CRAN\n\n3.2.1 Bioconductor\nCRAN (Comprehensive R Archive Network) is the go-to database network for R packages, but there are alternatives. Bioconductor collects R packages used in bioinformatics and related fields, and similarly to CRAN we can download packages from Bioconductor using convenient functions. Confusingly, a package named BiocManager is available at CRAN. Using BiocManager::install()2 we can install packages from Bioconductor.\n2 Notice the double colon here (::). This means that we are telling R to look for a function inside a package, specifically, look for the function called install in the BiocManager package. When using :: we do not need to load the package to access the function.\n\n3.2.2 GitHub\nGitHub is a hosts many R packages, some of which will never be submitted to CRAN for different reasons. Packages hosted on GitHub can also be downloaded and installed using a function provided by the remotes package.\nFirst we need to install remotes\n\ninstall.packages(\"remotes\")\n\nNext we can use remotes to install a package we will use later, a package that contains datasets, the exscidata package3\n3 See here for the GitHub repository where the package live.We load the remotes package and we can directly download, and install the package.\n\nlibrary(remotes)\ninstall_github(\"dhammarstrom/exscidata\")\n\n\n\n3.2.3 Other alternatives\nIn addition to CRAN, BioConductor and GitHub, R packages are hosted on rOpenSci which is a platform for hosting peer-reviewed R packages. These can also be hosted on CRAN or BioConductor, and at the same time be hosted on GitHub whit a developmental version. Similarly to GitHub, Gitlab and Bitbucket provides possibilities for hosting packages which can be installed using functions in the remotes package.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Packages are where functions live</span>"
    ]
  },
  {
    "objectID": "04-quarto-basic.html",
    "href": "04-quarto-basic.html",
    "title": "4  Reproducible reports, projects and quarto",
    "section": "",
    "text": "4.1 RStudio projects and your reproducible report\nA key goal with this crash course is to introduce R, and R friendly tools as part of a workflow for reproducible data analysis. This means that …\nthe degree to which research is reproducible is determined by the availability of:\nTo make these ingredients even more tasty, we might want to have them nicely stored together. Using the tools we discuss in this course we can think of data analysis projects as self-contained projects with all necessary ingredients. RStudio projects can help you organize your data and code, and text in one place. You can also link your project to an online repository for others to access. In this chapter we will discuss how reproducible report can be regarded as such a project. Online collaboration will be discussed in the next chapter.\nWhen you build an analysis in a R markdown or quarto file, R will use the folder that the source file is in as the root directory. This directory (or folder) is the top directory in a file system. This means that R will look for data or other files used to generate the report in this folder structure. Think of this folder as ./ (confusing, I know! But bare with me!). Any sub-folders to the root directory can be called things like\nThe R markdown or quarto file, being in the root directory will have the “address” ./my_rmarkdown_file.Rmd.\nThis has several advantages, as long as you stick to one rule: When doing an analysis, always use relative paths (“addresses” to files and folders). Never reference a folder or file by their absolute path. The absolute path for the file I’m writing in now is C:/Users/Daniel1/Documents/projects/quant-methods/06-writing-reports.qmd. The relative path is ./06-writing-reports.qmd. When working in a “project” you may move the folder containing your project to other locations, but relative paths will not break.\nIf you want to share your analysis, all you need to do is share the folder with all content with your friend. If you use relative paths, everything will work on your friends computer. If you use absolute paths, nothing will work, unless your friends computer uses the same folder structure (highly unlikely).\nRStudio projects makes it easy to jump back and forth between projects. The project menu (top right corner in RStudio) contains all your recent projects. When starting a new project, R will create a .Rproj file that contains the settings for your project. If you start a project and click this file, a settings menu will appear where you can customize settings for your particular project.\nWhat does this have to do with my quarto/RMarkdown file? As mentioned above, the source file is often written in a context where you have data and other files that help you create your desired output. By always working in a project makes it easy to keep every file in the right place.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible reports, projects and quarto</span>"
    ]
  },
  {
    "objectID": "04-quarto-basic.html#rstudio-projects-and-your-reproducible-report",
    "href": "04-quarto-basic.html#rstudio-projects-and-your-reproducible-report",
    "title": "4  Reproducible reports, projects and quarto",
    "section": "",
    "text": "./data/ (a folder where you keep data files),\n./figures/ (a folder where you output figures from analyses).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible reports, projects and quarto</span>"
    ]
  },
  {
    "objectID": "04-quarto-basic.html#getting-started-with-r-projects",
    "href": "04-quarto-basic.html#getting-started-with-r-projects",
    "title": "4  Reproducible reports, projects and quarto",
    "section": "4.2 Getting started with R projects",
    "text": "4.2 Getting started with R projects\nTo start a new project in RStudio:\n\nPress the project menu in the upper right corner, choose “Start a project in a brand new working directory”\nIn the next menu, select “New Project” and chose a suitable location on your machine for the project to live.\nUn-check the option of creating a git repository. We will do this later.\nName the project with an informative name. “Project1” is not good enough, “rproject-tutorial” or “rproject-report-workshop” is better as you will be able to track it down afterwards.\n\nWe have now started up a brand new project without version control. The next step is to make sure the setting of the project is up date with our Global settings in RStudio. By clicking the .Rproj file in our files tab, we will open up a settings window. These are the settings for the project. Under General we see that we can set RStudio to handle the workspace and history as default. This means that our global options will be used. The global options regarding workspace should be to never save workspace, do not restore on start up and do not save history.\n\n4.2.1 What folder am I in?\nThe great advantage of an RStudio Project is that it will make it easier to keep everything contained in our folder. To check what folder we are currently in, type getwd() in the console. R should return the full path to our working directory. If this is the case, success. If not, you have probably not succeeded in opening up a project, or you have somehow told R to set another working directory.\nThe working directory is the root directory. It is possible to set the working directory manually. However, we should aim not to do that! The R command setwd() should not be used as it breaks relative paths.\nSee R for Data Science, chapter 7 for more details on RStudio projects.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible reports, projects and quarto</span>"
    ]
  },
  {
    "objectID": "04-quarto-basic.html#authoring-reports-in-quarto",
    "href": "04-quarto-basic.html#authoring-reports-in-quarto",
    "title": "4  Reproducible reports, projects and quarto",
    "section": "4.3 Authoring reports in quarto",
    "text": "4.3 Authoring reports in quarto\nSo much fuzz just for writing a report? Yes, it is a bit more work to get started. The upside is that this system is easier to navigate with increasing complexity compared to a system where text, figures, tables and software are located on different locations in your computer and the final report requires copy-paste operations.\nAs mentioned before, we will focus on the more modern format for authoring reports in R, quarto. In this section we will introduce the basic building blocks of a report and how to put them together. We have already covered figures and tables, now its time to put that into context.\n\n4.3.1 The Markdown syntax, and friends\nWe have already mentioned the markup language markdown1. This enables an author like yourself to format your text in a plain text editor. This has the advantage of keeping formatting explicit and available from the keyboard. In a word editor like MS Word, formatting is sometimes not obvious and you need to point and click make changes. The R-markdown style of markdown includes the ability to combine code in code chunks and embedded in text. This makes it possible to include code output in the final report. Another technical achievement that makes RMarkdown and quarto possible is Pandoc, a general document conversion software. Pandoc can convert files from one format to another, this includes the operations that we use, from markdown to HTML, PDF or Word. Both markdown and pandoc are free and open source software that makes life easy for us!\n1 Markdown was introduced in 2004 as a syntax to convert plain text to formatted HTML. Markdown is primarily attributed to John Gruber.\n4.3.1.1 Markdown basics\nThe idea of using markdown is that everything is formatted in plain text. This requires a little bit of extra syntax. We can use bold or italic, striketrough and superscript. Lists are also an option as numbered:\n\nItem one\nItem two\n\nAnd, as unordered\n\nItem x\nItem y\n\nWith sub item z\n\n\nLinks can be added like this.\nA table can be added also, like this:\n\n\n\nColumn 1\nColumn2\n\n\n\n\nItem1\nItem 2\n\n\n\nThe whole section above will look like this in your plain text editor:\n\nThe idea of using markdown is that everything is formatted in plain text. \nThis requires a little bit of extra syntax. We can use **bold** or *italic*, \n~~striketrough~~ and ^superscript^. Lists are also an option as numbered:\n\n1. Item one\n2. Item two\n\nAnd, as unordered\n\n* Item x\n* Item y\n  + With sub item z\n  \nLinks can be added [like this](https://rmarkdown.rstudio.com/authoring_basics.html).\n\nA table can be added also, like this:\n\n|Column 1|Column2|\n|---| ---|\n|Item1 | Item 2|\n\n\n\n\n4.3.2 Additional formatting\nIn addition to plain markdown, we can also write HTML or LaTeX in RMarkdown or quarto files.\nHTML is convenient when we want to add formatted text beyond the capabilities of markdown, such as color. Some formatting might be considered more easily remembered such as subscript and superscript. Notice that HTML and markdown syntax can be combined:\nSome Markdown text with some blue text, superscript.\n\n\nSee here for syntax\nHTML is convenient when we want to add formatted text \nbeyond the capabilities of markdown, such as \n&lt;span style=\"color:red\"&gt;color&lt;/span&gt;. Some formatting \nmight be considered more easily remembered such as \n&lt;sub&gt;subscript&lt;/sub&gt; and &lt;sup&gt;superscript&lt;/sup&gt;. \n\nNotice that HTML and markdown syntax can be combined:\n\nSome Markdown text with &lt;span style=\"color:blue\"&gt;some *blue* \n  text, &lt;sup&gt;&lt;span style=\"color:red\"&gt;super&lt;/span&gt;**script**&lt;/sup&gt;&lt;/span&gt;.\n\n\nLaTeX is another plain text formatting system, or markup language, but it far more complex than markdown. Text formatting using LaTeX is probably not needed for simpler documents as markdown and HTML will be enough. The additional advantage of using LaTeX comes with equations.\nEquations can be written inline, such as the standard deviation \\(s = \\sqrt{\\frac{\\sum{(x_i - \\bar{x})^2}}{n-1}}\\). An equation can also be written on the center of the document\n\\[\nF=ma\n\\tag{4.1}\\]\nWe are also able to cross-reference the equation Equation 4.1 for force (\\(F\\)).\nA larger collection of equations is sometimes needed to describe a statistical model, as in Equation 4.2.\n\\[\n\\begin{aligned}\n\\begin{split}\n\\text{y}_i &\\sim \\operatorname{Normal}(\\mu_i, \\sigma)\n\\\\\n\\mu_i &= \\beta_0 + \\beta_1 \\text{x}_i,\n\\end{split}\n\\end{aligned}\n\\tag{4.2}\\]\nThe equation above could look like this in your editor, including the tag ({#eq-model}) used for cross-referencing:\n\n$$\n\\begin{align}\n\\text{y}_i & \\sim \\operatorname{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i & = \\beta_0 + \\beta_1 \\text{x}_i,\n\\end{align}\n$$ {#eq-model}\n\nSee this wikibook on LaTeX for an overview on mathematics in LaTeX.\n\n\n4.3.3 Code chunks\nUsing RMarkdown syntax we can add a code chunk using the following syntax:\n```{r}\n#| label: fig-simple-plot\n#| message: false\n#| echo: true\n\ndat &lt;- data.frame(a = rnorm(10, 10, 10), \n                  b = runif(10, 1, 20))\n\nplot(dat)\n\n```\nWe recognize the R code inside the code chunk but we have only touched upon code chunk settings. These are settings that tells R (or quarto) how to handle output from the code chunk. message: false indicate that any messages from R code should not be displayed in the output document. echo: true indicates that the code in the code chunk should be displayed in the output document. The label is important as it enables cross-referencing the output. If your code chunk outputs a figure the prefix fig- must be in the label to enable cross-referencing. Likewise, if your code chunk creates an table, the prefix tbl- must be in the label. Possible code chunk settings also include figure and table captions.\nSettings can also be specified in the YAML field in quarto files. We might not want to display our code, messages or warnings in the final output. We would specify this in the YAML field as\n\n---\ntitle: \"A basic quarto report without code\"\nexecute:\n  echo: false\n  message: false\n  warning: false\n---\n\nSee here for documentation on execution options for code chunks in quarto. See also Chapter 29 in R for data science.\n\n\n4.3.4 Cross-referencing, references and footnotes\nWe have mentioned cross-referencing above, this basically means referencing specific parts of your document in the text. A figure might be mentioned in the text, such as Figure 4.1. To insert the cross-reference in text, use the @fig-label syntax where fig- is the required prefix for figures and label is a user defined unique identifier. The label should be included in the code chunk under such as #| label: fig-label. The equivalent prefix for tables is tbl-.\n\n\n\n\n\n\n\n\nFigure 4.1: This is an example of a Figure with a caption.\n\n\n\n\n\nWe might want to cross-reference a section in our document. This is easily done by inserting a tag at the section header such as {#sec-cross-reference}, this tag can be referenced in text using @sec-cross-reference resulting in Section 4.3.4. The sec- part is the required prefix for a section.\nFor additional details on cross-referencing, see the quarto documentation on cross-referencing.\nCitations are mandatory in academic writing. Be sure to take advantage of the built in support for citations. When writing in quarto (or RMarkdown) we can think of a reference as having three parts. The identifier, the reference and the style. We use the identifier when authoring. For example, let’s cite the R for Data Science book, we do this by using the following syntax (r4ds?). The syntax requires that we have linked a bibliography to the document. The bibliography should include the reference, with the same identifier. The bibliography is a collection of reference entries written in bibtext format (see below). It must be included in the document meta data field (YAML field).\n\n@book{r4ds,\n  title={R for data science},\n  author={Wickham, Hadley and {\\c{C}}etinkaya-Rundel, Mine and Grolemund, Garrett},\n  year={2023},\n  publisher={\" O'Reilly Media, Inc.\"}\n}\n\nNotice the identifier. When adding the citation [@r4ds] it will turn out to (r4ds?) in the formatted text and added to the bottom of the document as a full reference. If we want another citation style we can specify a file responsible for citation styles. The default is the Chicago style. Specifying a citation style file in YAML will change the style, for example csl: my-citation-style.csl tells quarto to use the file my-citation-style.csl when formatting citations. This file can be edited or copied from a large collection of possible styles located in the citation style language repository. The repository is hosted on GitHub and searchable, click “Go to file” and type “vancouver” to get examples of CSL files that uses a Vancouver-type citation style.\nFootnotes can be handy when writing. In the default mode, these will be included as superscript numbers, like this2, numbered by order of appearance.\n2 This is a footnote.The syntax for including footnotes is straight forward. Notice that the text for the footnote is included below the paragraph using the identifier created in the text.\n\n\nSee here for footnote syntax\nFootnotes can be handy when writing. In the default mode, \nthese will be included as superscript numbers, like \nthis[^footnote], numbered by order of appearance. \n\n[^footnote]: This is a footnote.\n\n\nSee the quarto documentation on citations and footnotes.\nsee also Chapter 29 in R for data science.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible reports, projects and quarto</span>"
    ]
  },
  {
    "objectID": "04-quarto-basic.html#additional-files-and-folder-structures-in-a-complete-analysis-project",
    "href": "04-quarto-basic.html#additional-files-and-folder-structures-in-a-complete-analysis-project",
    "title": "4  Reproducible reports, projects and quarto",
    "section": "4.4 Additional files and folder structures in a complete analysis project",
    "text": "4.4 Additional files and folder structures in a complete analysis project\nAs we starting to notice, a report authored in quarto or R Markdown often requires additional files to render properly. We might have a collection of references, some data sets and possibly some analysis files that are not included in the quarto or R markdown file. To keep everything organized I recommend a general folder structure for every analysis project. This structure might change as the project grows or changes. The parts listed below are what I usually end up with as a common set in the majority of projects I work with3.\n3 This organization was initially inspired by Karl Broman’s steps towards reproducible science.\n4.4.1 The readme-file\nThe README-file can be, or should be an important file for you. When a project is larger than very tiny, it becoms complex and you should include a README-file to tell others and yourself what the project is about and how it is organized. Creating a file called README.md in a GitHub folder automatically renders it on the main page of your repository (more about that later). Here you have the opportunity to outline the project and explain the organization of your projects folder/repository.\nI find it very helpful to work with the README-file continuously as the project evolves. It helps me remember where the project is going.\nA very basic ouline of the README-file can be\n\n# My project\n\nAuthor: \nDate: \n\n## Project description \nA description of what this prject is about, the \npurpose and how to get there. \n\n## Organization of the repository\n\nFiles are organized as...\n\n## Changes and logs\n2023-08-15: Added a description of the project...\n\n\n\n4.4.2 /resources\nI usually include a sub-folder called resources. Here I keep CSL-files, the bibliography, any styling or templates used to render the report. Keeping this in a separate folder keeps the top-folder clean.\n\n\n4.4.3 /data\nThe data folder is an important one. Here I keep all data that exists as e.g., .csv or .xlsx files. If I create data in the project, such as combined data sets that are stored for more convienient use, I keep these in a sub-folder (e.g., data/derived-data/)4. If there is a lot of raw unprocessed data, these might be stored in data/raw-data/ with specific sub-folders.\n4 Again, an important note from Karl Broman, “Organize your data and code”\n\n4.4.4 /figures\nIf you want to make figures for presentations or submission to a journal, you might want to save output as .tiff or .pdf files. When doing this it might be a good idea to structure a figure-folder with e.g. figure1.R that renders to e.g. figure1.pdf. If you only include figure output in the quarto, the figure folder might contain R-scripts that produces the figures. The end results are included in the quarto document by sourcing the R-script. This detour might make it easier to find code for a specific figure once your project is large enough.\n\n\n4.4.5 /R\nR-scripts that are not figures but contains analyses or data cleaning or the like can be stored in R scripts in a specific folder. The reason to keep R scripts separate from a quarto file might be that they are large and produces some output, like a data set, that is later used in the report file. It makes it easier to find and work on specific code without breaking other parts of your project. Actually, it is a good idea to “build” the parts of your analysis as smaller parts.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible reports, projects and quarto</span>"
    ]
  },
  {
    "objectID": "04-quarto-basic.html#quarto-formats",
    "href": "04-quarto-basic.html#quarto-formats",
    "title": "4  Reproducible reports, projects and quarto",
    "section": "4.5 Quarto formats",
    "text": "4.5 Quarto formats\nQuarto brings many possibilities for authoring data-driven formats, including but not restricted to websites, books, blogs and presentations. In this course\n\n4.5.1 Microsoft Word intergration in R Markdown and Quarto\nSometimes it is useful to “knit” to a word file. For example when you want to share a report with fellow students who are not familiar with R. R Markdown/Quarto can be used as a source for word documents (.docx).\nTo create a word document from your Rmd-file/qmd-file you need a working installation of Microsoft Word. Settings for the output is specified in the YAML metadata field in the Rmd-file. This is the first section of a Rmd file, and when you want it to create a word file you specify it like this:\n---\ntitle: \"A title\"\nauthor: Daniel Hammarström\ndate: 2020-09-05\noutput: word_document\n---\nThe output: word_document (or format: docx when using quarto) tells R to create a word file. If you are not happy with the style of the word document (e.g. size and font of text) you can tell R to use a template file. Save a word file that you have knitted as reference.docx and use specify in the YAML field that you will use this as reference. See here for the equivalent formatting of quarto documents\n---\ntitle: \"A title\"\nauthor: Daniel Hammarström\ndate: 2020-09-05\noutput: \n        word_document:\n                reference_docx: reference.docx\n---\nEdit styles (Stiler in Norwegian) used in the reference file (right click on the style and edit). For example, editing the “Title” style (Tittel in Norwegian) will change the main titel of the document. After you have edited the document, save it.\nWhen you knit the document again, your updated styles will be used your word document.\nHere you can read more about using R Markdown together with word. If you do not have word installed, you can also use Open Office. Read more about it here.\n\n4.5.1.1 Adding references to R Markdown and Quarto files\nReferences/citations can be added to the report using the bibliography option in the YAML field. Citations needs to be listed in a file, multiple formats are availiable. A convenient format is bibtex. When using this format, create a text file with the ending .bib, for example, bibliography.bib.\nThe bibliography.bib-file needs to be activated in the YAML-field. Do it by adding this information:\n---\ntitle: \"A title\"\nauthor: Daniel Hammarström\ndate: 2020-09-05\noutput: \n        word_document:\n                reference_docx: reference.docx\nbibliography: bibliography.bib\n---\nAdd citations to the file in bibtex-format. Here is an example:\n@Article{refID1,\n   Author=\"Ellefsen, S.  and Hammarstrom, D.  and Strand, T. A.  and Zacharoff, E.  and Whist, J. E.  and Rauk, I.  and Nygaard, H.  and Vegge, G.  and Hanestadhaugen, M.  and Wernbom, M.  and Cumming, K. T.  and Rønning, R.  and Raastad, T.  and Rønnestad, B. R. \",\n   Title=\"{Blood flow-restricted strength training displays high functional and biological efficacy in women: a within-subject comparison with high-load strength training}\",\n   Journal=\"Am. J. Physiol. Regul. Integr. Comp. Physiol.\",\n   Year=\"2015\",\n   Volume=\"309\",\n   Number=\"7\",\n   Pages=\"R767--779\",\n   Month=\"Oct\"}\nThe part that says refID1 can be edited to something appropriate. This is a reference identification, you use it to get the citation into the text. When citing you do it in the form\nBlood flow-restricted training leads to similar adaptations as traditional training [@refID1].\nThis will appear in text as:\n\nBlood flow-restricted training leads to similar adaptations as traditional training (refID1?).\n\nThe reference will end up in the end of the document (as on this webpage).\nYou can gather references in bibtex format from Oria (use the BIBTEX icon) and from PubMed using TeXMed. You can also export reference in bibtex format from citation software like Endnote or Zotero. Make sure you check all references when entering them, especially MedTex gives some problems with “scandinavian” letters (å æ ä ø ö).\nRecently RStudio added support for adding citations inside the visual markdown editor.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Reproducible reports, projects and quarto</span>"
    ]
  }
]